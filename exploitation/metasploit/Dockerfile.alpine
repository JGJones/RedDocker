FROM ruby:2.6.2-alpine3.9 AS builder
LABEL maintainer="Rapid7"

ARG BUNDLER_ARGS="--jobs=8 --without development test coverage"
ENV APP_HOME=/usr/src/metasploit-framework
ENV BUNDLE_IGNORE_MESSAGES="true"
WORKDIR $APP_HOME

COPY Gemfile* metasploit-framework.gemspec Rakefile $APP_HOME/
COPY lib/metasploit/framework/version.rb $APP_HOME/lib/metasploit/framework/version.rb
COPY lib/metasploit/framework/rails_version_constraint.rb $APP_HOME/lib/metasploit/framework/rails_version_constraint.rb
COPY lib/msf/util/helper.rb $APP_HOME/lib/msf/util/helper.rb

RUN apk add --no-cache \
      autoconf \
      bison \
      build-base \
      ruby-dev \
      openssl-dev \
      readline-dev \
      sqlite-dev \
      postgresql-dev \
      libpcap-dev \
      libxml2-dev \
      libxslt-dev \
      yaml-dev \
      zlib-dev \
      ncurses-dev \
      git \
    && echo "gem: --no-ri --no-rdoc" > /etc/gemrc \
    && gem update --system \
    && bundle install --clean --no-cache --system $BUNDLER_ARGS \
    # temp fix for https://github.com/bundler/bundler/issues/6680
    && rm -rf /usr/local/bundle/cache \
    # needed so non root users can read content of the bundle
    && chmod -R a+r /usr/local/bundle


FROM ruby:2.6.2-alpine3.9
LABEL maintainer="Rapid7"

ENV APP_HOME=/usr/src/metasploit-framework
ENV NMAP_PRIVILEGED=""
ENV METASPLOIT_GROUP=metasploit

# used for the copy command
RUN addgroup -S $METASPLOIT_GROUP

RUN apk add --no-cache bash sqlite-libs nmap nmap-scripts nmap-nselibs postgresql-libs python python3 ncurses libcap su-exec

RUN /usr/sbin/setcap cap_net_raw,cap_net_bind_service=+eip $(which ruby)
RUN /usr/sbin/setcap cap_net_raw,cap_net_bind_service=+eip $(which nmap)

COPY --from=builder /usr/local/bundle /usr/local/bundle
RUN chown -R root:metasploit /usr/local/bundle
COPY . $APP_HOME/
RUN chown -R root:metasploit $APP_HOME/
RUN chmod 664 $APP_HOME/Gemfile.lock
RUN cp -f $APP_HOME/docker/database.yml $APP_HOME/config/database.yml

WORKDIR $APP_HOME

# we need this entrypoint to dynamically create a user
# matching the hosts UID and GID so we can mount something
# from the users home directory. If the IDs don't match
# it results in access denied errors.
ENTRYPOINT ["docker/entrypoint.sh"]

CMD ["./msfconsole", "-r", "docker/msfconsole.rc", "-y", "$APP_HOME/config/database.yml"]




# FROM alpine:latest
# LABEL maintainer="JGJones"

# # Postgres for msg
# # docker network create postgres
# # docker run --rm --name msfdb --network postgres -e POSTGRES_PASSWORD=msf -d -p 5432:5432 -v $HOME/.msf4/postgres:/var/lib/postgresql/data postgres

# ENV BUILD_PACKAGES \
# 	autoconf \
# 	bison \
# 	subversion \
# 	git \
# 	curl-dev \
# 	ruby-dev \
# 	build-base \
# 	libffi-dev \
# 	libressl-dev \
# 	readline-dev \
# 	sqlite-dev \
# 	postgresql-dev \
# 	libpcap-dev \
# 	libxml2-dev \
# 	libxslt-dev \
# 	yaml-dev \
# 	zlib-dev \
# 	ncurses-dev

# ENV STOCK \
# 	bash \
# 	curl \
# 	tar \
# 	gnupg \
# 	nmap \
# 	ncurses \
# 	libxslt

# ENV RUBY_PACKAGES \
# 	ruby \
# 	ruby-io-console \
# 	ruby-bundler \
# 	ruby-bigdecimal

# # Update and install all of the required packages.
# # At the end, remove the apk cache
# RUN echo "http://nl.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories && \
# 	apk update && apk upgrade && \
#     apk add $BUILD_PACKAGES && \
#     apk add $RUBY_PACKAGES && \
#     apk add $STOCK && \
#     rm -rf /var/cache/apk/*

# ENV PATH=$PATH:/opt/msf:/opt/msf/msf:/opt/msf/tools
# ENV NOKOGIRI_USE_SYSTEM_LIBRARIES=1

# # Copy tmux.conf
# #COPY tmux.conf /root/.tmux.conf

# ##########
# # Oracle #
# ##########

# # WORKDIR /opt/oracle
# # COPY instantclient-basic-linux.x64-12.2.0.1.0.zip /opt/oracle
# # COPY instantclient-sqlplus-linux.x64-12.2.0.1.0.zip /opt/oracle
# # COPY instantclient-sdk-linux.x64-12.2.0.1.0.zip /opt/oracle
# # RUN unzip instantclient-basic-linux.x64-12.2.0.1.0.zip
# # RUN unzip instantclient-sqlplus-linux.x64-12.2.0.1.0.zip
# # RUN unzip instantclient-sdk-linux.x64-12.2.0.1.0.zip
# # RUN rm -f *.zip
# # RUN cd instantclient_12_2 && ln libclntsh.so.12.1 libclntsh.so

# # Setting environment variables

# # ENV PATH=$PATH:/opt/oracle/instantclient_12_2
# # ENV SQLPATH=/opt/oracle/instantclient_12_2
# # ENV TNS_ADMIN=/opt/oracle/instantclient_12_2
# # ENV LD_LIBRARY_PATH=/opt/oracle/instantclient_12_2
# # ENV ORACLE_HOME=/opt/oracle/instantclient_12_2

# ##############
# # Metasploit #
# ##############

# WORKDIR /opt
# RUN git clone https://github.com/rapid7/metasploit-framework.git msf && \
# 	cd msf && \
# 	bundle install

# #WORKDIR msf

# COPY database.yml /opt/msf/config
# COPY db.sql /tmp

# # Symlink tools to $PATH
# #RUN ln -s /opt/msf/msf* /usr/local/bin
# #RUN for i in `ls /opt/msf/tools/*/*`; do ln -s $i /usr/local/bin/; done

# ## Install ruby gem for Oracle

# #WORKDIR /opt/oracle
# #RUN wget https://github.com/kubo/ruby-oci8/archive/ruby-oci8-2.2.7.zip
# #RUN unzip ruby-oci8-2.2.7.zip
# #RUN rm ruby-oci8-2.2.7.zip
# #WORKDIR /opt/oracle/ruby-oci8-ruby-oci8-2.2.7
# #RUN /bin/bash -l -c "source /usr/local/rvm/scripts/rvm && make && make install"
# #################

# #WORKDIR /opt/msf
# # Copying entrypoint file

# #COPY start.sh /
# #RUN chmod +x /start.sh

# # Set volumes for data

# VOLUME /root/.msf4
# VOLUME /tmp/data

# # For backconnect shellcodes (or payloads as if you want to use fancy names)
# EXPOSE 4444/tcp
# EXPOSE 4444/udp

# # Opening some typical ports
# EXPOSE 80/tcp
# EXPOSE 80/udp
# EXPOSE 8080/tcp
# EXPOSE 8080/udp
# EXPOSE 443/tcp
# EXPOSE 443/udp
# EXPOSE 445/tcp
# EXPOSE 445/udp
# EXPOSE 8081/tcp
# EXPOSE 8081/udp

# #ENTRYPOINT ["/start.sh"]