FROM ubuntu
LABEL maintainer="JGJones"

# References:
# https://www.darkoperator.com/installing-metasploit-in-ubunt/
# https://www.pentestgeek.com/tools/install-metasploit-framework-ubuntu

ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
	apt-get install -y postgresql postgresql postgresql-client postgresql-contrib \
	nmap tmux git build-essential nano vim curl wget htop libaio1 \
	libreadline-dev libssl-dev libpq5 libpq-dev libreadline5 libsqlite3-dev \
	libpcap-dev autoconf pgadmin3 zlib1g-dev libxml2-dev libxslt1-dev libyaml-dev \
	zlib1g-dev gawk bison libffi-dev libgdbm-dev libncurses5-dev libtool sqlite3 \
	libgmp-dev gnupg2 dirmngr ntpdate gnupg2 sudo zip unzip p7zip-full libgmp-dev && \
	rm -rf /var/lib/apt/lists/*

USER root

# Copy tmux.conf
COPY tmux.conf /root/.tmux.conf

##########
# Oracle #
##########

WORKDIR /opt/oracle
COPY instantclient-basic-linux.x64-12.2.0.1.0.zip /opt/oracle
COPY instantclient-sqlplus-linux.x64-12.2.0.1.0.zip /opt/oracle
COPY instantclient-sdk-linux.x64-12.2.0.1.0.zip /opt/oracle
RUN unzip instantclient-basic-linux.x64-12.2.0.1.0.zip
RUN unzip instantclient-sqlplus-linux.x64-12.2.0.1.0.zip
RUN unzip instantclient-sdk-linux.x64-12.2.0.1.0.zip
RUN rm -f *.zip
RUN cd instantclient_12_2 && ln libclntsh.so.12.1 libclntsh.so

# Setting environment variables

ENV PATH=$PATH:/opt/oracle/instantclient_12_2
ENV SQLPATH=/opt/oracle/instantclient_12_2
ENV TNS_ADMIN=/opt/oracle/instantclient_12_2
ENV LD_LIBRARY_PATH=/opt/oracle/instantclient_12_2
ENV ORACLE_HOME=/opt/oracle/instantclient_12_2

##############
# Metasploit #
##############

WORKDIR /opt
RUN git clone https://github.com/rapid7/metasploit-framework.git msf
WORKDIR msf

## Set up Postgresql
COPY db.sql /tmp
RUN service postgresql start && su postgres -c "psql -f /tmp/db.sql"

## Get RVM
RUN curl -sSL https://rvm.io/mpapis.asc | gpg2 --import
RUN curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -
RUN curl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -
RUN curl -L https://get.rvm.io | bash -s stable 
RUN /bin/bash -l -c "rvm --install ruby-`cat .ruby-version`"
RUN /bin/bash -l -c "rvm requirements"
RUN /bin/bash -l -c "rvm use `cat .ruby-version` --default"
RUN /bin/bash -l -c "source /usr/local/rvm/scripts/rvm"
RUN /bin/bash -l -c "gem install bundler --no-document"
RUN /bin/bash -l -c "source /usr/local/rvm/scripts/rvm && which bundle"
RUN /bin/bash -l -c "which bundle"

# Ruby dependencies
RUN /bin/bash -l -c "BUNDLEJOBS=$(expr $(cat /proc/cpuinfo | grep vendor_id | wc -l) - 1)"
RUN /bin/bash -l -c "bundle config --global jobs $BUNDLEJOBS"
RUN /bin/bash -l -c "bundle install"

COPY ./database.yml /opt/msf/config

# Symlink tools to $PATH
RUN ln -s /opt/msf/msf* /usr/local/bin
RUN for i in `ls /opt/msf/tools/*/*`; do ln -s $i /usr/local/bin/; done

## Install ruby gem for Oracle

WORKDIR /opt/oracle
RUN wget https://github.com/kubo/ruby-oci8/archive/ruby-oci8-2.2.7.zip
RUN unzip ruby-oci8-2.2.7.zip
#RUN rm ruby-oci8-2.2.7.zip
WORKDIR /opt/oracle/ruby-oci8-ruby-oci8-2.2.7
RUN /bin/bash -l -c "source /usr/local/rvm/scripts/rvm && make && make install"
#################

WORKDIR /opt/msf
# Copying entrypoint file

COPY start.sh /
RUN chmod +x /start.sh

# Set volumes for data

VOLUME /root/.msf4
VOLUME /tmp/data

# For backconnect shellcodes (or payloads as if you want to use fancy names)
EXPOSE 4444/tcp
EXPOSE 4444/udp

# Opening some typical ports
EXPOSE 80/tcp
EXPOSE 80/udp
EXPOSE 8080/tcp
EXPOSE 8080/udp
EXPOSE 443/tcp
EXPOSE 443/udp
EXPOSE 445/tcp
EXPOSE 445/udp
EXPOSE 8081/tcp
EXPOSE 8081/udp

ENTRYPOINT ["/start.sh"]